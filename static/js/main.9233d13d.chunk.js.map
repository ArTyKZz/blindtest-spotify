{"version":3,"sources":["logo.svg","loading.svg","Button.js","App.js","registerServiceWorker.js","index.js"],"names":["module","exports","Button","props","onClick","children","shuffleArray","array","counter","length","index","getRandomNumber","temp","x","Math","floor","random","AlbumCover","src","track","album","images","url","style","width","height","App","useState","tracks","setTrack","songsLoaded","setSongLoaded","songPlaying","setSongPlaying","currentTrack","setCurrentTrack","arrayTrack","setArrayTrack","checkAnswer","id","swal","then","track1","track2","track3","shuffleTrack","useEffect","fetch","method","headers","Authorization","response","json","data","items","previewUrl","preview_url","console","log","className","logo","alt","playStatus","Sound","status","PLAYING","map","name","loading","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.9233d13d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.79f6b6a0.svg\";","module.exports = __webpack_public_path__ + \"static/media/loading.9d4cbf40.svg\";","import React from 'react';\nimport './Button.css';\n\nconst Button = (props) => (\n  <button onClick={props.onClick}>{props.children}</button>\n);\n\nexport default Button;\n","/*global swal*/\n\nimport React from 'react';\nimport logo from './logo.svg';\nimport loading from './loading.svg';\nimport './App.css';\nimport Sound from 'react-sound';\nimport Button from './Button';\nimport { useState } from 'react';\nimport { useEffect } from 'react';\n\nconst apiToken = 'BQDw62GaPoGzLanDoBsId5pBSYwj91amJ4YOdMYJGwyDKP36f1Vcf6zKjlA0NKdht8GIR2B1_ArvZMDmR8q0wE8PaFn72zYCasTs3B3o-2w3INcd7Yc1HvxT4jBgirJZ6AhCwQj8kD3f3-NT5LB__J3vdYIF8rKQ9GM5mnoKfjN-cr6R';\n\nfunction shuffleArray(array) {\n  let counter = array.length;\n\n  while (counter > 0) {\n    let index = getRandomNumber(counter);\n    counter--;\n    let temp = array[counter];\n    array[counter] = array[index];\n    array[index] = temp;\n  }\n\n  return array;\n}\n\n/* Return a random number between 0 included and x excluded */\nfunction getRandomNumber(x) {\n  return Math.floor(Math.random() * x);\n}\n\nconst AlbumCover = (props) => {\n    const src = props.track.album.images[0].url;\n    return (\n        <img src={src} style={{ width: 400, height: 400 }} />\n    );\n}\n\nconst App = () => {\n  const [tracks, setTrack] = useState([]);\n  const [songsLoaded, setSongLoaded] = useState(false);\n  const [songPlaying, setSongPlaying] = useState(false)\n  const [currentTrack, setCurrentTrack] = useState(null);\n  const [arrayTrack, setArrayTrack] = useState([]);\n\n  const onplay = () => {\n    setSongPlaying(true);\n  }\n  const onpause = () => {\n    setSongPlaying(false);\n  }\n  const shuffleTrack = () => {\n      let track1 = tracks[getRandomNumber(tracks.length)].track;\n      let track2 = tracks[getRandomNumber(tracks.length)].track;\n      while(track1 === track2){\n        track2 = tracks[getRandomNumber(tracks.length)].track;\n      }\n      let track3 = tracks[getRandomNumber(tracks.length)].track;\n      while((track1 === track3) || (track2 === track3)){\n        track3 = tracks[getRandomNumber(tracks.length)].track;\n      }\n      setArrayTrack(shuffleArray([track1, track2, track3]));\n      setCurrentTrack(track1);\n    };\n  \n  const checkAnswer = (id) => {\n    if(id === currentTrack.id){\n      swal('Bravo', \"T'es vraiment un crackito\", 'success').then(() => shuffleTrack());\n    } else{\n      swal(\"T'es nul\", 'Même Mathis est meilleur que toi', 'error');\n    }\n  }\n\n  useEffect(() => {fetch('https://api.spotify.com/v1/me/tracks', {\n    method: 'GET',\n    headers: {\n    Authorization: 'Bearer ' + apiToken,\n    },\n  }\n  )\n    .then(response => response.json())\n    .then((data) => {\n      setTrack(data.items);\n      let track1 = data.items[getRandomNumber(data.items.length)].track;\n      let track2 = data.items[getRandomNumber(data.items.length)].track;\n      while(track1 === track2){\n        track2 = data.items[getRandomNumber(data.items.length)].track;\n      }\n      let track3 = data.items[getRandomNumber(data.items.length)].track;\n      while((track1 === track3) || (track2 === track3)){\n        track3 = data.items[getRandomNumber(data.items.length)].track;\n      }\n      setArrayTrack(shuffleArray([track1, track2, track3]));\n      setCurrentTrack(track1);\n      setSongLoaded(true);\n    });}, []);\n\n    if(songsLoaded){\n      const previewUrl = currentTrack.preview_url;\n      console.log(\"Réponse reçue ! Voilà ce que j'ai reçu : \", arrayTrack);\n      return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\"/>\n        <h1 className=\"App-title\">Bienvenue sur le Blindtest de Mickou</h1>\n      </header>\n      <div className=\"App-images\">\n        <AlbumCover track={currentTrack}/>\n        {songPlaying && <Sound url={previewUrl} playStatus={Sound.status.PLAYING}/>}\n      </div>\n      <div className=\"App-buttonsPlayPause\">\n        <Button onClick={() => onplay()}>Play</Button>\n        <Button onClick={() => onpause()}>Stop</Button>\n      </div>\n      <div className=\"App-buttons\">\n        {arrayTrack.map(track =>\n          <Button onClick={() => checkAnswer(track.id)}>{track.name}</Button>\n        )}\n      </div>\n    </div>\n  );\n    } else{\n      return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={loading} className=\"App-logo\" alt=\"logo\"/>\n        <h1 className=\"App-title\">Chargement des musiques</h1>\n      </header>\n      <div className=\"App-images\">\n      </div>\n      <div className=\"App-buttons\">\n      </div>\n    </div>\n  );\n    }\n  \n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}